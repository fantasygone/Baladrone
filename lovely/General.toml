[manifest]
version = "1.0.0"
dump_lua = true
priority = 1




# Trap can score negative chips
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''-- TARGET: main scoring on played cards'''
position = "after"
payload = '''
if card.ability.cs_fake and not card.debuff then
    ret.playing_card.chips = card.base.nominal - (card.base.nominal*2)

    if card.config.center ~= G.P_CENTERS.m_cs_fake then
        card:set_ability(G.P_CENTERS['m_cs_fake'])
        card:juice_up(0.6, 0.6)
    end
end
'''
match_indent = true




# Restoration restores itself
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.debuff then return nil end'''
position = "before"
payload = '''
if self.ability.name == 'j_cs_restoration' and self.debuff and context.before and context.scoring_hand then
    G.E_MANAGER:add_event(Event({trigger = 'before',delay = 0.1,func = function()
        self.debuff = false
        if self.ability and self.ability.perishable then 
            self.ability.perish_tally = 3
        end
        self:juice_up(0.3, 0.3)
    return true end }))
    card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('cs_restored'), colour = G.C.ORANGE})
end
'''
match_indent = true




# Remove temp cards when leaving shop
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
  G.FUNCS.toggle_shop = function(e)
    stop_use()
    G.CONTROLLER.locks.toggle_shop = true
    if G.shop then
'''
position = "after"
payload = '''
    for i = 1, #G.consumeables.cards do
        local current_cons = G.consumeables.cards[i]

        if current_cons.ability.cs_temp.active and current_cons.ability.cs_temp.expiry == 'ending_shop' then
            SMODS.destroy_cards(current_cons)
        end
    end
'''
match_indent = true




# Prevent Ante from increasing after beating a Boss blind
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''delay(0.4); ease_ante(1); delay(0.4); check_for_unlock({type = 'ante_up', ante = G.GAME.round_resets.ante + 1})'''
position = "at"
payload = '''
    if SMODS.find_card('j_cs_downwards_escalator')[1] then
        local cs_escalator = SMODS.find_card('j_cs_downwards_escalator')[1]

        card_eval_status_text(cs_escalator, 'extra', nil, nil, nil, {message = localize('cs_slowed_down'), colour = G.C.ALIGNMENT["cs_hacker"]})

        SMODS.destroy_cards(cs_escalator, true)
    else
        delay(0.4); ease_ante(1); delay(0.4); check_for_unlock({type = 'ante_up', ante = G.GAME.round_resets.ante + 1})
    end
'''
match_indent = true




# Return blocked cards to hand after scoring
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
    for k, v in ipairs(G.play.cards) do
        if (not v.shattered) and (not v.destroyed) then 
            draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
            it = it + 1
        end
    end
'''
position = "at"
payload = '''
local cs_walls = SMODS.find_card('j_cs_four_walls')

if cs_walls[1] and not cs_walls[1].debuff and G.GAME.blind and G.GAME.blind:get_type() == 'Small' then
    cs_walls[1].ability.mult = cs_walls[1].ability.mult + cs_walls[1].ability.extra
    G.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.1,func = function()
        play_sound('cs_wall')
    return true end }))
    card_eval_status_text(cs_walls[1], 'extra', nil, nil, nil, {message = localize('cs_blocked'), colour = G.C.RED})

    for k, v in ipairs(G.play.cards) do
        if (not v.shattered) and (not v.destroyed) then 
            draw_card(G.play,G.hand, it*100/play_count,'up', true, v)
            it = it + 1
        end
    end
else
    for k, v in ipairs(G.play.cards) do
        if (not v.shattered) and (not v.destroyed) then 
            draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
            it = it + 1
        end
    end
end

'''
match_indent = true




# Prevent drawing from deck if Four Walls is present
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
    G.FUNCS.draw_from_deck_to_hand = function(e)
'''
position = "after"
payload = '''
    local cs_walls = SMODS.find_card('j_cs_four_walls')

    if cs_walls[1] and G.GAME.current_round.cs_cards_are_blocked and not cs_walls[1].debuff and G.GAME.blind and G.GAME.blind:get_type() == 'Small' then
        return
    end
'''
match_indent = true




# Add Bending the Rules unlock condition
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
    check_for_unlock({type = 'round_win'})
'''
position = "after"
payload = '''
check_for_unlock({type = 'cs_blind_beaten', score = G.GAME.chips, blind_size = G.GAME.blind.chips})
'''
match_indent = true




# Uhhhh patching SMODS? wish me luck...
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''
-- TARGET: add your own CardAreas for joker evaluation
'''
position = "after"
payload = '''
table.insert(t, G.cs_alignments)
'''
match_indent = true




# Making sure to draw the called cards with Call the Orb
[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''
local hand_space = e
'''
position = "before"
payload = '''
if #SMODS.find_card('j_cs_call_the_orb') > 0 and G.GAME.blind:get_type() and G.GAME.blind:get_type() ~= 'Small' and G.GAME.blind:get_type() ~= 'Big' and #G.GAME.current_round.orb_card.cards > 0 and G.GAME.current_round.orb_card.called then
    G.GAME.current_round.orb_card.called = false
    card_eval_status_text(SMODS.find_card('j_cs_call_the_orb')[1], 'extra', nil, nil, nil, {message = localize('cs_call_received'), colour = G.C.ALIGNMENT['cs_patron']})

    for i=1, #G.GAME.current_round.orb_card.cards do
        if cs_utils.contains(G.deck.cards, G.GAME.current_round.orb_card.cards[i]) then
            draw_card(G.deck,G.hand, i*100/#G.GAME.current_round.orb_card.cards,'up', true, G.GAME.current_round.orb_card.cards[i])
        end
    end

    return
end
'''
match_indent = true