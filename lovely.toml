[manifest]
version = "1.0.0"
dump_lua = true
priority = 1




# Trap can score negative chips
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''-- TARGET: main scoring on played cards'''
position = "after"
payload = '''
if card.ability.cs_fake then
    ret.playing_card.chips = card.base.nominal - (card.base.nominal*2)
end
'''
match_indent = true




# Restoration restores itself
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.debuff then return nil end'''
position = "before"
payload = '''
if self.ability.name == 'j_cs_restoration' and self.debuff and context.before and context.scoring_hand then
    G.E_MANAGER:add_event(Event({trigger = 'before',delay = 0.1,func = function()
        self.debuff = false
        if self.ability and self.ability.perishable then 
            self.ability.perish_tally = 3
        end
        self:juice_up(0.3, 0.3)
    return true end }))
    card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('cs_restored'), colour = G.C.ORANGE})
end
'''
match_indent = true




# Remove temp cards when leaving shop
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
  G.FUNCS.toggle_shop = function(e)
    stop_use()
    G.CONTROLLER.locks.toggle_shop = true
    if G.shop then
'''
position = "after"
payload = '''
    for i = 1, #G.consumeables.cards do
        local current_cons = G.consumeables.cards[i]

        if current_cons.ability.cs_temp.active and current_cons.ability.cs_temp.expiry == 'ending_shop' then
            G.E_MANAGER:add_event(Event({trigger = 'before',delay = 0.1,func = function()
                current_cons:start_dissolve()
            return true end }))
        end
    end
'''
match_indent = true




# Prevent Ante from increasing after beating a Boss blind
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''delay(0.4); ease_ante(1); delay(0.4); check_for_unlock({type = 'ante_up', ante = G.GAME.round_resets.ante + 1})'''
position = "at"
payload = '''
    if SMODS.find_card('j_cs_downwards_escalator')[1] then
        local cs_escalator = SMODS.find_card('j_cs_downwards_escalator')[1]

        card_eval_status_text(cs_escalator, 'extra', nil, nil, nil, {message = localize('cs_slowed_down'), colour = G.C.ALIGNMENT["cs_hacker"]})

        G.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.1,func = function()
            cs_escalator:start_dissolve()
        return true end }))
    else
        delay(0.4); ease_ante(1); delay(0.4); check_for_unlock({type = 'ante_up', ante = G.GAME.round_resets.ante + 1})
    end
'''
match_indent = true