[manifest]
version = "1.0.0"
dump_lua = true
priority = -1





# Add custom sound to eval
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if extra.edition then"
position = "before"
payload = "sound = extra.sound or sound"
match_indent = true




# Add new colors
[[patches]]
[patches.pattern]
target = "globals.lua"
pattern = "RARITY = {"
position = "before"
payload = '''
    ALIGNMENT = {
        cs_patron = HEX("8bfe0f"),
        cs_joker = HEX("fefe15"),
        cs_wicked = HEX("f80404"),
        cs_keeper = HEX("feae0a"),
        cs_muggle = HEX("cccccc"),
        cs_hacker = HEX("febfe9"),
        cs_thief = HEX("0146fe"),
        cs_archon = HEX("23ee9c"),
        cs_drifter = HEX("6c9648"),
        cs_heretic = HEX("b9a0e6"),
        cs_spectre = HEX("0dfefe"),
        cs_chameleon = HEX("cc03ed"),
    },
    CS_ORANGE = HEX("b03815"),'''
match_indent = true



# Add new colors
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "legendary = G.C.RARITY[4],"
position = "after"
payload = '''
    cs_patron = G.C.ALIGNMENT["cs_patron"],
    cs_joker = G.C.ALIGNMENT["cs_joker"],
    cs_wicked = G.C.ALIGNMENT["cs_wicked"],
    cs_keeper = G.C.ALIGNMENT["cs_keeper"],
    cs_muggle = G.C.ALIGNMENT["cs_muggle"],
    cs_hacker = G.C.ALIGNMENT["cs_hacker"],
    cs_thief = G.C.ALIGNMENT["cs_thief"],
    cs_archon = G.C.ALIGNMENT["cs_archon"],
    cs_drifter = G.C.ALIGNMENT["cs_drifter"],
    cs_heretic = G.C.ALIGNMENT["cs_heretic"],
    cs_spectre = G.C.ALIGNMENT["cs_spectre"],
    cs_chameleon = G.C.ALIGNMENT["cs_chameleon"],
    cs_orange = G.C.CS_ORANGE,
'''
match_indent = true




# Added new context beforeall
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.hands[text].played = G.GAME.hands[text].played + 1"
position = "before"
payload = '''
    for i=1, #G.jokers.cards do
        if cs_utils.contains(beforeall_context, G.jokers.cards[i].ability.name) then
            --calculate the joker before hand evaulation
            local effects = eval_card(G.jokers.cards[i], {cardarea = G.jokers, cs_beforeall = true, scoring_hand = scoring_hand})
            if effects.jokers then
                card_eval_status_text(G.jokers.cards[i], 'jokers', nil, 1.1, nil, effects.jokers)
            end
        end
    end

    text,disp_text,poker_hands,scoring_hand,non_loc_disp_text = G.FUNCS.get_poker_hand_info(G.play.cards)
'''
match_indent = true




# Trap can score negative chips lessgo!
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
        if chips > 0 then 
            ret.chips = chips
        end
'''
position = "after"
payload = '''
    if card.ability.cs_fake then
        ret.chips = card.base.nominal - (card.base.nominal*2)
    end
'''
match_indent = true




# remove "+" when scoring fake cards
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''text = localize{type='variable',key='a_chips',vars={amt}}'''
position = "after"
payload = '''
    if card.ability.cs_fake then
        text = localize{type='variable',key='cs_just_chips',vars={amt}}
    end
'''
match_indent = true



